# #################################
# Training ECAPA-TDNN embeddings for Accent identification (LID) of English Data.
#
# Authors:
#  * For SLT Juan Pablo and Sara
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 2001
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Set up folders for reading from and writing:
data_folder: /not_used/
csv_prepared_folder: /home/projects/vokquant/accent-recog-slt2022/CommonAccent/data/at_states
output_folder: !ref /home/projects/vokquant/accent-recog-slt2022/CommonAccent/results/ECAPA-TDNN/AT/spkrec-ecapa-voxceleb/<seed>
pretrained_path: !ref /home/projects/vokquant/accent-recog-slt2022/CommonAccent/results/ECAPA-TDNN/AT/spkrec-ecapa-voxceleb/<seed>/save
load_folder: !ref <pretrained_path>/CKPT+2024-10-10+13-20-24+00
device: 'cuda:0'
# device: !ref 'cpu'
skip_prep: True
# max audio lenth allowed, higher than this is dropped
max_audio_length: 10
min_audio_length: 2
# Feature parameters btw: 40 - 80
n_mels: 80

dynamic_batching: True

# Training Parameters
sample_rate: 16000
batch_size: 16
n_languages: 8
emb_dim: 192 # dimensionality of the embeddings

test_dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: False

# variable to control whether to apply augmentation or not:
apply_augmentation: False

# Feature extraction
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>

# Mean and std normalization of the input features
mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

mean_var_norm_input: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined.

# Embedding Model
embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
    input_size: !ref <n_mels>
    activation: !name:torch.nn.LeakyReLU
    channels: [1024, 1024, 1024, 1024, 3072]
    kernel_sizes: [5, 3, 3, 3, 1]
    dilations: [1, 2, 3, 4, 1]
    attention_channels: 128
    lin_neurons: !ref <emb_dim>

# Classifier based on cosine distance
classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: !ref <emb_dim>
    out_neurons: !ref <n_languages>

# Loss function to calculate during inference (this is optional)
# Additive Angular Margin
compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30

# Keep the error stats here:
error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

# Keep the error stats here:
error_stats2: !name:speechbrain.utils.metric_stats.BinaryMetricStats

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    compute_features: !ref <compute_features>
    mean_var_norm: !ref <mean_var_norm>
    mean_var_norm_input: !ref <mean_var_norm_input>    
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>

label_encoder: !new:speechbrain.dataio.encoder.CategoricalEncoder

# Load fine-tuned model and classifier
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    loadables:
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        label_encoder: !ref <label_encoder>
        # device: !ref <device>
    paths:
        embedding_model: !ref <load_folder>/embedding_model.ckpt
        classifier: !ref <load_folder>/classifier.ckpt
        label_encoder: !ref <pretrained_path>/accent_encoder.txt
        # device: !ref <device>
