# #################################
# Training ECAPA-TDNN embeddings for Accent identification (LID) of English Data.
#
# Authors:
#  * For SLT Juan Pablo and Sara
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 3006
__set_seed: !apply:torch.manual_seed [!ref <seed>]

freeze_embedding: False
freeze_classifier: False

# Set up folders for reading from and writing to
# Dataset will be downloaded to the `data_folder`
# data_folder: !PLACEHOLDER # e.g. /localscratch/common_voice_kpd/
data_folder: /notused/
#csv_prepared_folder is overwritten by .sh script
csv_prepared_folder: /home/projects/vokquant/accent-recog-slt2022/CommonAccent/data/at_augmented_regions
#output_folder is overwritten by .sh script
output_folder: !ref /home/projects/vokquant/accent-recog-slt2022/CommonAccent/results/ECAPA-TDNN/AT/lang-id-voxlingua107-ecapa/<seed>
save_folder: !ref <output_folder>/save
rir_folder: !ref data/rir_folder
train_log: !ref <output_folder>/train_log.txt
device: 'cuda:0'
skip_prep: True
# max audio lenth allowed, higher than this is dropped
avoid_if_longer_than: 10.0

# Load pretrained embedding module (from HuggingFace)
# Note: in this case, we pre-train with the ECAPA-TDNN model trained on voxceleb
# for speaker-id (this leads to a performance improvement).

# ecapa_tdnn_hub: speechbrain/spkrec-ecapa-voxceleb/embedding_model.ckpt
ecapa_tdnn_hub: speechbrain/lang-id-voxlingua107-ecapa/embedding_model.ckpt

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

# Feature parameters btw: 40 - 80
n_mels: 60

# Training Parameters
sample_rate: 16000
number_of_epochs: 10
batch_size: 8
n_accents: 109
emb_dim: 256 # dimensionality of the embeddings

# batch type of sorting
sorting: random # sort the samples

# This setup works well for V100 32GB GPU, adapts it to your needs.
# Or turn it off (but training speed will decrease)
dynamic_batching: False
max_batch_len: 600 #
num_bucket: 200
num_workers: 4

dynamic_batch_sampler:
   max_batch_len: !ref <max_batch_len>
   max_batch_len_val: !ref <max_batch_len>
   num_buckets: !ref <num_bucket>
   shuffle_ex: True # if true re-creates batches at each epoch shuffling examples.
   batch_ordering: random
   max_batch_ex: 128

# Dataloader options
# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
valid_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
test_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>

# variable to control whether to apply augmentation or not:
apply_augmentation: True

# variable to control whether to load a pre-trained model
load_pretrained: True

# Added noise and reverb come from OpenRIR dataset, automatically
# downloaded and prepared with this Environmental Corruption class.
env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <rir_folder>
    openrir_max_noise_len: 3.0  # seconds
    babble_prob: 0.0
    reverb_prob: 1.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

# A small speed change help to improve the performance of speaker-id as well.
augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
   sample_rate: !ref <sample_rate>
   speeds: [90, 100, 110]

# Feature extraction
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>

# Mean and std normalization of the input features
mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined.

# Embedding Model
embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
    input_size: !ref <n_mels>
    activation: !name:torch.nn.LeakyReLU
    channels: [1024, 1024, 1024, 1024, 3072]
    kernel_sizes: [5, 3, 3, 3, 1]
    dilations: [1, 2, 3, 4, 1]
    attention_channels: 128
    lin_neurons: !ref <emb_dim>

# Classifier based on cosine distance
classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: !ref <emb_dim>
    out_neurons: !ref <n_accents>

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    compute_features: !ref <compute_features>
    env_corrupt: !ref <env_corrupt>
    augmentation: !ref <augmentation>
    embedding_model: !ref <embedding_model>
    mean_var_norm: !ref <mean_var_norm>
    classifier: !ref <classifier>

model: !new:torch.nn.ModuleList
   - [!ref <embedding_model>, !ref <classifier>]


# Additive Angular Margin
compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30

# Learning rates
lr: 0.0001

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.000002

# Linear lr decay
lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.9
    patient: 0

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        normalizer_input: !ref <mean_var_norm>
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        counter: !ref <epoch_counter>

# Pretrained ECAPA embeddings from SpeakerID on VoxCeleb
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>
    loadables:
        embedding_model: !ref <embedding_model>
    paths:
        embedding_model: !ref <ecapa_tdnn_hub>
