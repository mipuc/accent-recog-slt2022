# #################################
# Training ECAPA-TDNN embeddings for Accent identification (LID) of English Data.
#
# Authors:
#  * For SLT Juan Pablo and Sara
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1001
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Set up folders for reading from and writing:
data_folder: /notused/
csv_prepared_folder: /home/projects/vokquant/accent-recog-slt2022/CommonAccent/data/at_augmented
output_folder: !ref /home/projects/vokquant/accent-recog-slt2022/CommonAccent/results/W2V2/AT/wav2vec2-large-xlsr-53/<seed>
                     
save_folder: !ref <output_folder>/save
# pretrained_path: !ref /home/projects/vokquant/accent-recog-slt2022/CommonAccent/results/W2V2/
# <output_folder>/save
load_folder: !ref <save_folder>/CKPT+2024-10-16+19-19-50+00
wav2vec2_checkpoint: !ref <save_folder>/CKPT+2024-10-16+19-19-50+00
device: 'cuda:0'
# device: 'cpu'
skip_prep: True
# max audio lenth allowed, higher than this is dropped
max_audio_length: 10

# Feature parameters btw: 40 - 80
n_mels: 80

# Training Parameters
sample_rate: 16000
batch_size: 16
# n_languages: 109
n_accents: 8
wav2vec2_hub: "facebook/wav2vec2-large-xlsr-53" # dimension of this model is 1024
emb_dim: 1024 # dimensionality of the embeddings
encoder_dim: 1024
num_workers: 8


test_dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: False
    num_workers: !ref <num_workers>

# variable to control whether to apply augmentation or not:
apply_augmentation: False

augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
   sample_rate: !ref <sample_rate>
   speeds: [95, 100, 105]

acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# Feature extraction
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>

# Mean and std normalization of the input features
mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

# embedding_model: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
#     source: !ref facebook/wav2vec2-large-xlsr-53
#     save_path: !ref <load_folder>/embedding_model.ckpt

freeze_wav2vec2: False
# set to true to freeze the CONV part of the wav2vec2 model
# We see an improvement of 2% with freezing CNNs
freeze_wav2vec2_conv: False

# Model parameters
activation: !name:torch.nn.GELU
dnn_layers: 2
dnn_neurons: 1024

# front end Wav2vec2 - main model
wav2vec2: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
    source: !ref <wav2vec2_hub>
    output_norm: True
    freeze: !ref <freeze_wav2vec2>
    freeze_feature_extractor: !ref <freeze_wav2vec2_conv>
    save_path: !ref <wav2vec2_checkpoint>

# possible classes are statpool, adaptivepool, avgpool
avg_pool_class: statpool

output_mlp: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <encoder_dim>
    n_neurons: !ref <n_accents>
    bias: False

preout_mlp: !new:speechbrain.lobes.models.VanillaNN.VanillaNN
   input_shape: [null, null, !ref <encoder_dim>]
   activation: !ref <activation>
   dnn_blocks: !ref <dnn_layers>
   dnn_neurons: !ref <encoder_dim>

env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
    # openrir_folder: !ref <rir_folder>
    openrir_max_noise_len: 3.0  # seconds
    babble_prob: 0.0
    reverb_prob: 1.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

model: !new:torch.nn.ModuleList
   - [!ref <preout_mlp>, !ref <output_mlp>]

# Loss function to calculate during inference (this is optional)
# Additive Angular Margin
# compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
#     loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
#         margin: 0.2
#         scale: 30

compute_cost: !name:speechbrain.nnet.losses.nll_loss

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

# Keep the error stats here:
error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

# Keep the error stats here:
error_stats2: !name:speechbrain.utils.metric_stats.BinaryMetricStats

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    env_corrupt: !ref <env_corrupt>
    augmentation: !ref <augmentation>
    wav2vec2: !ref <wav2vec2>
    preout_mlp: !ref <preout_mlp>
    output_mlp: !ref <output_mlp>

label_encoder: !new:speechbrain.dataio.encoder.CategoricalEncoder

# Load fine-tuned model and classifier
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    loadables:
        wav2vec2: !ref <wav2vec2>
        # classifier: !ref <classifier>
        label_encoder: !ref <label_encoder>
    paths:
        wav2vec2: !ref <load_folder>/wav2vec2.ckpt
        # classifier: !ref <load_folder>/classifier.ckpt
        label_encoder: !ref <save_folder>/accent_encoder.txt
