# #################################
# Fine-tuning XLSR-53 model for Accent identification (LID) of English Data.
#
# Authors:
#  * SLT-CODE Hackathon Juan Pablo Zuluaga Gomez
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 3000
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Set up folders for reading from and writing to
# Dataset will be downloaded to the `data_folder`
# data_folder: !PLACEHOLDER # e.g. /localscratch/common_voice_kpd/
data_folder: /notused/
csv_prepared_folder: /home/projects/vokquant/accent-recog-slt2022/CommonAccent/data/at_augmented
output_folder: !ref /home/projects/vokquant/accent-recog-slt2022/CommonAccent/results/W2V2/xlsr-53-<avg_pool_class>/<seed>
save_folder: !ref <output_folder>/save
rir_folder: !ref data/rir_folder
train_log: !ref <output_folder>/train_log.txt
device: 'cuda:0'
skip_prep: True
# max audio lenth allowed, higher than this is dropped
avoid_if_longer_than: 10.0

# URL for the biggest Fairseq english wav2vec2 model.
# wav2vec2_hub: "facebook/wav2vec2-large-xlsr-53" # dimension of this model is 1024
wav2vec2_hub: "facebook/mms-lid-126" # Updated to the Facebook MMS model
adapter_model_path: "facebook/mms-lid-126" # Updated to the Facebook MMS model
# Model parameters
# encoder_dim: 1024
encoder_dim: 1280


# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# Training Parameters
sample_rate: 16000
number_of_epochs: 20
batch_size: 4   #will be overriden by .sh script

# set to TRUE to freeze all wav2vec2
freeze_wav2vec2: False
# set to true to freeze the CONV part of the wav2vec2 model
# We see an improvement of 2% with freezing CNNs
freeze_wav2vec2_conv: False

# Number of accents
n_accents: 109

# batch type of sorting
sorting: random # sort the samples

# This setup works well for RTX 3090 24GB GPU, adapts it to your needs.
# Or turn it off (but training speed will decrease)
dynamic_batching: True
max_batch_len: 100 # XLSR is way bigger than w2v2-base, this works well
num_bucket: 200
num_workers: 4

dynamic_batch_sampler:
   max_batch_len: !ref <max_batch_len>
   max_batch_len_val: !ref <max_batch_len>
   num_buckets: !ref <num_bucket>
   shuffle_ex: True # if true re-creates batches at each epoch shuffling examples.
   batch_ordering: random
   max_batch_ex: 128

# Dataloader options
# train_dataloader_opts:
#     num_workers: !ref <num_workers>
# valid_dataloader_opts:
#     num_workers: !ref <num_workers>
# test_dataloader_opts:
#     num_workers: !ref <num_workers>

##
train_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
valid_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
test_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
##
# variable to control whether to apply augmentation or not:
apply_augmentation: False

# Added noise and reverb come from OpenRIR dataset, automatically
# downloaded and prepared with this Environmental Corruption class.
env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <rir_folder>
    openrir_max_noise_len: 3.0  # seconds
    babble_prob: 0.0
    reverb_prob: 1.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

# A small speed change help to improve the performance of speaker-id as well.
augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
   sample_rate: !ref <sample_rate>
   speeds: [95, 100, 105]

# Model parameters
activation: !name:torch.nn.GELU
dnn_layers: 2
dnn_neurons: 1024

# front end Wav2vec2 - main model
# wav2vec2: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
#     source: !ref <wav2vec2_hub>
#     output_norm: True
#     freeze: !ref <freeze_wav2vec2>
#     freeze_feature_extractor: !ref <freeze_wav2vec2_conv>
#     save_path: !ref <save_folder>/wav2vec2_checkpoint

wav2vec2: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
    source: !ref <wav2vec2_hub>
    output_norm: True
    freeze: True  # Freeze the main model
    freeze_feature_extractor: True  # Feature extractor also frozen
    use_adapters: True  # Add this line to enable adapters
    adapter_config:
        reduction_factor: 16  # Controls the bottleneck size in the adapter layer (can be tuned)
    save_path: !ref <save_folder>/wav2vec2_checkpoint

adapter_config:
   reduction_factor: 16  # You can experiment with this value
   adapter_type: "bottleneck"  # Common adapter type

# Optimizer for adapters (if needed)
opt_class_adapters: !name:torch.optim.Adam
    lr: !ref <lr>  # Use a smaller learning rate specific to adapters

lr_annealing_adapters: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.9

# possible classes are statpool, adaptivepool, avgpool
avg_pool_class: statpool

output_mlp: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <encoder_dim>
    n_neurons: !ref <n_accents>
    bias: False

preout_mlp: !new:speechbrain.lobes.models.VanillaNN.VanillaNN
   input_shape: [null, null, !ref <encoder_dim>]    # first two dimensions are flexible, VanillaNN basic feedforward nn
   activation: !ref <activation>
   dnn_blocks: !ref <dnn_layers>
   dnn_neurons: !ref <encoder_dim>

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
# modules:
#     env_corrupt: !ref <env_corrupt>
#     augmentation: !ref <augmentation>
#     wav2vec2: !ref <wav2vec2>
#     preout_mlp: !ref <preout_mlp>
#     output_mlp: !ref <output_mlp>

modules:
    env_corrupt: !ref <env_corrupt>
    augmentation: !ref <augmentation>
    wav2vec2: !ref <wav2vec2>
    preout_mlp: !ref <preout_mlp>
    output_mlp: !ref <output_mlp>
    peft_adapter_config:
        adapter_type: "lora"  # Can be lora, prefix_tuning, etc.
        r: 8
        alpha: 16
        dropout: 0.1

model: !new:torch.nn.ModuleList
   - [!ref <preout_mlp>, !ref <output_mlp>]

# Additive Angular Margin
# compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
#     loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
#         margin: 0.2
#         scale: 30

# standard NLL loss
compute_cost: !name:speechbrain.nnet.losses.nll_loss

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

# Learning rates for normal optimizer and W2V2 model
lr: 0.0001
lr_wav2vec2: 0.00001

# Optimizers class 
opt_class: !name:torch.optim.Adam
    lr: !ref <lr>

wav2vec2_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_wav2vec2>

# LR annealing objects
lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.9
    patient: 0

lr_annealing_wav2vec2: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr_wav2vec2>
    improvement_threshold: 0.0025
    annealing_factor: 0.9

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
# checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
#     checkpoints_dir: !ref <save_folder>
#     recoverables:
#         model: !ref <model>
#         wav2vec2: !ref <wav2vec2>
#         lr_annealing_output: !ref <lr_annealing>
#         lr_annealing_wav2vec2: !ref <lr_annealing_wav2vec2>
#         counter: !ref <epoch_counter>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        wav2vec2: !ref <wav2vec2>
        # adapters: !ref <wav2vec2_adapters>  # Add this to track adapters
        lr_annealing_output: !ref <lr_annealing>
        lr_annealing_adapters: !ref <lr_annealing_adapters>
        counter: !ref <epoch_counter>